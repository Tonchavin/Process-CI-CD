
image: busybox:latest

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy
  - stop
variables:
  IMAGE_TAG: $CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA
  MyLogin: $MyLogin

cache:
  key: 
    files:
      - composer.lock
  paths:
    - vendor/

before_script:
  - echo "Before script section"
  - echo "For example you might run an update here or install a build dependency"
  - echo "Or perhaps you might print out some debugging details"

after_script:
  - echo "After script section"
  - echo "For example you might do some cleanup here"

build1:
  stage: build
  script:
    - echo "Do you build here"
    - echo one >> house.txt
    - mkdir -p vendor/
    - echo "build" > vendor/hello.txt
#    - sleep 60

docker build:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  script:
    - docker login -u $GITLAB_CI_USER -p $GITLAB_CI_PASSWORD $CI_REGISTRY
    - echo $GITLAB_CI_USER $GITLAB_CI_PASSWORD $CI_REGISTRY $CI_REGISTRY_IMAGE:IMAGE_TAG
    - docker build -t $CI_REGISTRY_IMAGE:IMAGE_TAG .
    - docker push $CI_REGISTRY_IMAGE:IMAGE_TAG

test1:
  stage: test
  script:
    - echo "Do a test here"
    - echo "For example run a test suite"
    #- grep one house.txt
    #- sleep 60
    - cat vendor/hello.txt
    #- sleep 10

test2:
  image: docker:latest
  stage: test
  services:
    - docker:dind
  script:
    - echo "Do another parallel test here"
    - echo "For example run a lint test"
    - docker run $CI_REGISTRY_IMAGE:IMAGE_TAG
    - docker ps
    - echo "-----TEST DOCKER IMAGE-----"
    #- grep two house.txt

deploy to stage:
  stage: deploy
  variables:
    TARGET_ENV: staging
  script:
    - echo "Do your deploy here to ${TARGET_ENV}"
    - echo ${DB_SERVER}
  only:
    - main
  environment:
    name: staging
    on_stop: stop to staging
    auto_stop_in: 1 day

stop to staging:
  stage: stop
  variables:
    TARGET_ENV: staging
  script:
    - echo "STOP ${TARGET_ENV}"
  only:
    - main
  when: manual
  environment:
    name: staging
    action: stop

deploy to preprod:
  stage: deploy
  variables:
    TARGET_ENV: preprod
    MyLogin: preprod
  script:
    - echo "Do your deploy here to ${TARGET_ENV}"
    - echo ${DB_SERVER}
    - echo ${MyPassword}
    - echo ${MyLogin}
  only:
    - main
  environment:
    name: preprod

deploy to production:
  stage: deploy
  variables:
    TARGET_ENV: production
    MyLogin: production
  script:
    - echo "Do your deploy here to ${TARGET_ENV}"
    - echo ${DB_SERVER}
    - echo ${MyPassword}
    - echo ${MyLogin}
  only:
    - main
  environment:
    name: production
        
build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Compiling the code..."
    - echo "Compile complete."

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    #- sleep 60
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    #- sleep 10
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."


#pages:
#  stage: deploy
#  script:
#    - mkdir -p public
#    - cp house.txt public/index.html
#    - echo 404 >> public/404.html
#  artifacts:
#    exclude:
#      - public/404.html
#    paths:
#      - public
#  only:
#    - main